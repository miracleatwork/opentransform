/**
 * This Test generates all the bundles which are generated by Transform.
 * User can refer this class to gain understanding of the code.
 * 
 * Created By:Miracle
 * 
 */
package test.miracle.labs.microservice.transform;

import java.io.File;
import java.io.IOException;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;

import com.miracle.labs.microservice.transform.Manager;
import com.miracle.labs.microservice.transform.model.Attributes;
import com.miracle.labs.microservice.transform.service.FileOperations;
import com.miracle.labs.microservice.transform.service.RESTWrapper;
import com.miracle.labs.microservice.transform.service.SimpleProxyConfiguration;

/**
 * This test class pushes and validates the generated files to Monolith & Microservice project folder.
 * This is a best attempt automation of Deploying Instructions given within newMicroservice and newMonolith directory.
 * 
 * @author miracle
 *
 */
public class TestInitialState {

	Manager manager;
	Attributes attributes; 
	private FileOperations operations;

	/**
	 * This method demonstrates use of Attributes Object which is primary place holder with important configurations for Transform process.
	 * Manager is the starting operation class.
	 * @throws ClassNotFoundException
	 * @throws IOException
	 */
	@Before
	public void setup() throws ClassNotFoundException, IOException
	{
		attributes = new Attributes();
		attributes.setsourceDirectoryOfMonlithCode(new File("../Monolith/src"));
		attributes.setTargetMonlithCodeDirectory(new File("./newMonolith"));
		attributes.setTargetMicroserviceCodeDirectory(new File("./newMicroservice"));
		attributes.setBaseCodeDirectory(new File("."));
		manager = new Manager(attributes);
		manager.setup();
		operations = new FileOperations();
	}
	
	/**
	 * Test for the File Structure of the initial state of the application
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	@Test
	public void testFileStructures() throws IOException, ClassNotFoundException {
		String newMonolithRepo = "./newMonolith";
		Assert.assertTrue(new File(newMonolithRepo).exists());
		
		String newMicroserviceRepo = "./newMicroservice";
		Assert.assertTrue(new File(newMicroserviceRepo).exists());
		
		String oldMonolithProjectRootDirectoryPath = "../Monolith";
		Assert.assertTrue(new File(oldMonolithProjectRootDirectoryPath).exists());
		
//		String oldMonolithSRCLink = "./Monolith-src";
//		Assert.assertTrue(new File(oldMonolithSRCLink).exists());
		
		String newMonolithProjectRootDirectoryPath = "../NewMonolith";
		Assert.assertTrue(new File(newMonolithProjectRootDirectoryPath).exists());
		
		String MonolithSRCPackagePath=newMonolithProjectRootDirectoryPath+"/src/com/monolith/legacy";
		Assert.assertTrue(new File(MonolithSRCPackagePath).exists());
		
		String newMicroserviceProjectRootDirectoryPath = "../ThorntailDemo";
		Assert.assertTrue(new File(newMicroserviceProjectRootDirectoryPath).exists());
		
		String MonolithSRCPackagePathWithinMicroservice=newMicroserviceProjectRootDirectoryPath+"/src/main/java/com/monolith/legacy";
		Assert.assertTrue(new File(MonolithSRCPackagePathWithinMicroservice).exists());
		
		


	}

	

}
